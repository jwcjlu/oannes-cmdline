// Code generated by oannes-go/oannes-go-cmdline. DO NOT EDIT.
// source: {{.Protofile}}

import (
 "context"
 )
 /* ************************************ Service Definition ************************************ */

{{ range $service := .Services }}
{{- $svrName := $service.Name -}}
{{- $svrNameCamelCase := $service.Name|camelcase -}}
// {{$svrNameCamelCase}}Service defines service
type {{$svrNameCamelCase}}Service interface {
    {{ range $rpc := $service.RPC }}
    {{- $rpcName := .Name | camelcase -}}
    {{- $rpcReqType := (simplify (gofulltype .RequestType $.FileDescriptor) $pkgName)|export }}
    {{- $rpcRspType := (simplify (gofulltype .ResponseType $.FileDescriptor) $pkgName)|export }}
    {{ with .LeadingComments }}// {{$rpcName}} {{.}}{{ end }}
    {{$rpcName}}(ctx context.Context, req *{{$rpcReqType}},rsp *{{$rpcRspType}}) (err error)
    {{ with .TrailingComments}}// {{.}}{{ end }}
    {{ end -}}
}
{{range $service.RPC -}}
{{- $rpcName := .Name | camelcase -}}
{{- $rpcReqType := (simplify (gofulltype .RequestType $.FileDescriptor) $pkgName)|export }}
{{- $rpcRspType := (simplify (gofulltype .ResponseType $.FileDescriptor) $pkgName)|export }}
func {{$svrNameCamelCase}}Service_{{$rpcName}}_Handler(svr interface{}, ctx context.Context, f
server.FilterFunc) (rspbody interface{}, err error) {
  req := &{{$rpcReqType}}{}
  rsp := &{{$rpcRspType}}{}
   filters, err := f(req)
  if err != nil {
     return nil, err
  }
  handleFunc := func(ctx context.Context, reqbody interface{}, rspbody interface{}) error {
  return svr.({{$svrNameCamelCase}}Service).{{$rpcName}}(ctx, reqbody.(*{{$rpcReqType}}), rspbody.(*{{$rpcRspType}}))
  }
  err = filters.Handle(ctx, req, rsp, handleFunc) if err != nil {
       return nil, err
   }
  return rsp, nil
}
{{end -}}
// {{$svrNameCamelCase}}Server_ServiceDesc descriptor for server.RegisterService
var {{$svrNameCamelCase}}Server_ServiceDesc = server.ServiceDesc {
         ServiceName: "{{$pkgName}}.{{$svrName}}",
         HandlerType: ((*{{$svrNameCamelCase}}Service)(nil)),
         Methods: []server.Method{
             {{- range $service.RPC}}
             {{- $rpcName := .Name | camelcase -}}
             {Name: "{{.FullyQualifiedCmd}}", Func: {{$svrNameCamelCase}}Service_{{$rpcName}} _Handler},
             {{- end}}
         },
    }
// Register{{$svrNameCamelCase}}Service register service
  func Register{{$svrNameCamelCase}}Service(s server.Service, svr {{$svrNameCamelCase}}Service) {
         s.Register(&{{$svrNameCamelCase}}Server_ServiceDesc, svr)
    }
{{ end }}
 /* ************************************ Client Definition ************************************ */